from neo4j import GraphDatabase
import logging
from typing import List, Dict

logging.basicConfig(level=logging.INFO)

class Neo4jDataStorage:
    def __init__(self, uri, user, password):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def store_vulnerabilities(self, vulnerabilities: List[Dict]):
        with self.driver.session() as session:
            for vulnerability in vulnerabilities:
                session.write_transaction(self._create_vulnerability_node, vulnerability)

    @staticmethod
    def _create_vulnerability_node(tx, vulnerability: Dict):
        cve_data = vulnerability.get('cve', {})
        query = (
            "CREATE (v:Vulnerability {id: $id, published: $published, lastModified: $lastModified, "
            "description: $description, status: $status})"
        )
        tx.run(query, 
               id=cve_data.get('id'),
               published=cve_data.get('published'),
               lastModified=cve_data.get('lastModified'),
               description=cve_data.get('descriptions', [{}])[0].get('value', ''),
               status=cve_data.get('vulnStatus')
        )

def store_data(data: List[Dict]):
    storage = Neo4jDataStorage("bolt://localhost:7687", "neo4j", "password")
    storage.store_vulnerabilities(data)
    storage.close()

def main():
    # Example data
    vulnerabilities = [
        {
            "cve": {
                "id": "CVE-2023-1234",
                "published": "2023-01-01T00:00:00",
                "lastModified": "2023-01-02T00:00:00",
                "descriptions": [{"value": "Example vulnerability 1"}],
                "vulnStatus": "Analyzed"
            }
        },
        {
            "cve": {
                "id": "CVE-2023-5678",
                "published": "2023-02-01T00:00:00",
                "lastModified": "2023-02-02T00:00:00",
                "descriptions": [{"value": "Example vulnerability 2"}],
                "vulnStatus": "Analyzed"
            }
        }
    ]

    store_data(vulnerabilities)

if __name__ == "__main__":
    main()