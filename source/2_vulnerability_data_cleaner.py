import json
import os
import logging
from typing import List, Dict
from config import config
from model.entities import Vulnerability, Component, Version, Patch
from model.database_operations import Neo4jConnector
import re
from model.NVD_OBJ import NVDData as NVD_OBJ

from model.logger_config import logger as logging # 初始化全局日志


def process_nvd_file(file_path: str, neo4j_connector: Neo4jConnector):
    """处理单个NVD JSON文件并将数据存入Neo4j数据库"""
    cpe_matches = []  # Initialize cpe_matches as an empty list

    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
            nvd_obj = NVD_OBJ.from_json(data)

            # 2. 创建漏洞对象并存入数据库

            vulnerability = Vulnerability(nvd_obj.cve_id, nvd_obj.description, nvd_obj.published_date, nvd_obj.last_modified_date,
                                          nvd_obj.cvss_v3_vector, nvd_obj.cvss_v3_base_score, nvd_obj.cwe_id, nvd_obj.references)
            neo4j_connector.create_vulnerability(vulnerability)

            # 3. 处理受影响的组件和版本
            Component.process_component(nvd_obj, neo4j_connector)
            # Version.process_versions(nvd_obj, neo4j_connector)

            # 4. 处理补丁
            Patch.process_patch(nvd_obj,neo4j_connector)


    except Exception as e:
        logging.error(f"Error processing file {file_path}: {str(e)}", exc_info=True)

    logging.debug(f"CPE matches found: {cpe_matches}")
    # ... rest of the function ...

def main():
    """主函数，处理所有NVD数据文件"""
    # 创建Neo4j连接器
    neo4j_connector = Neo4jConnector("bolt://localhost:7687", "neo4j", "12345678")

    # 获取所有年份文件夹
    year_folders = [f for f in os.listdir(config.NVD_DATA_PATH) if os.path.isdir(os.path.join(config.NVD_DATA_PATH, f))]
    
    files_processed = 0

    for year_folder in year_folders:
        year_path = os.path.join(config.NVD_DATA_PATH, year_folder)
        for filename in os.listdir(year_path):
            if filename.endswith('.json'):
                file_path = os.path.join(year_path, filename)
                logging.info(f"Processing file: {file_path}")
                process_nvd_file(file_path, neo4j_connector)
                
                files_processed += 1
                if files_processed >= config.MAX_FILES_TO_PROCESS:
                    logging.info(f"Reached the maximum number of files to process: {config.MAX_FILES_TO_PROCESS}")
                    return  # 提前结束处理

    # 关闭Neo4j连接
    neo4j_connector.close()

if __name__ == "__main__":
    main()